# This workflow will check formatting with Black, install Python dependencies, and run tests with pytest
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

# Apply this workflow when creating a pull request or pushing a commit to a PR
on: pull_request

jobs:
  setup:
    name: Setup Environment
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          architecture: 'x86'

      - name: Set environment variables
        run: echo "PIPENV_VENV_IN_PROJECT=true" >> $env:GITHUB_ENV

      - name: Install pipenv
        run: |
          python -m pip install --upgrade pip
          set PIPENV_VENV_IN_PROJECT=true
          pip install pipenv

      - name: Create and check virtual environment
        run: |
          pipenv --python 3.11
          if not exist .venv echo "Virtual environment not created!" & exit 1
        shell: cmd

      - name: Cache Dependencies
        uses: actions/cache@v3
        id: cache-dependencies
        with:
          path: .venv
          key: ${{ runner.os }}-pipenv-v6-${{ hashFiles('Pipfile.lock') }}

      - name: Install Dependencies
        if: steps.cache-dependencies.outputs.cache-hit != 'true'
        run: pipenv install --dev --verbose
        env:
          PIPENV_PYTHON: C:\hostedtoolcache\windows\Python\3.11\x86\python.exe

  build:
    name: Build Artifact
    runs-on: windows-latest
    needs: setup

    steps:
      - name: Create temporary directory
        run: mkdir -p temp_directory

      - name: Install 7-Zip
        run: choco install 7zip --no-progress

      - name: Download D23s50e.zip
        run: curl -L -o D23s50e.zip https://doe2.com/Download/DOE-23/D23s50e.zip

      - name: Extract D2Result.dll from D23s50e.zip
        run: 7z e D23s50e.zip doe23/DLL50e/D2Result.dll -p${{ secrets.DOE23_PASSWORD }} -o"temp_directory"

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: temp-files
          path: ./temp_directory/

  black-formatting-check:
    name: Black Formatting Check
    runs-on: windows-latest
    needs: setup

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Restore pipenv cache
        uses: actions/cache@v3
        with:
          path: .venv
          key: ${{ runner.os }}-pipenv-v6-${{ hashFiles('Pipfile.lock') }}
          restore-keys: ${{ runner.os }}-pipenv-v6-

      - name: Run Black
        uses: psf/black@stable
        with:
          version: "24.2.0"

  rpd-validation-test:
    name: Run RPD Validation Tests
    runs-on: windows-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          architecture: 'x86'

      - name: Restore pipenv cache
        uses: actions/cache@v3
        with:
          path: .venv
          key: ${{ runner.os }}-pipenv-v6-${{ hashFiles('Pipfile.lock') }}
          restore-keys: ${{ runner.os }}-pipenv-v6-

      - name: Install pipenv
        run: python -m pip install pipenv

      - name: Download build artifact
        uses: actions/download-artifact@v3
        with:
          name: temp-files
          path: ./temp_directory/

      - name: Generate test RPDs
        run: |
              pipenv run python test/generate_test_rpds_from_bdls.py --output_dir ./temp_directory --testing True

        # Step 3: Run the RPD validation script using pipenv
        #     - name: Validate the generated RPDs
        #       run: |
        #         pipenv run python test/validate_test_rpds.py temp_directory

        # Step 4: Run the JSON comparison script using pipenv
        #     - name: Run JSON comparison
        #       run: |
        #         pipenv run python compare_json.py path/to/reference.json path/to/generated.json path/to/tolerance.json

        # Step 5: Clean up the temporary directory
        #     - name: Clean up temporary directory
        #       if: always()
        #       run: |
        #          rm -rf temp_directory

        #  run-unit-tests:
        #    name: Run unit tests
        #    runs-on: 'ubuntu-latest'
        #    steps:
        #      - name: Checkout code
        #        uses: actions/checkout@v3
        #      - name: Setup Python
        #        uses: actions/setup-python@v4
        #        with:
        #          python-version: '3.11.7'
        #          cache: 'pipenv'
        #      - name: Install pipenv
        #        run: curl https://raw.githubusercontent.com/pypa/pipenv/master/get-pipenv.py | python
        #      - name: Install dependencies
        #        run: pipenv install --dev
        #      - name: Run pytests
        #        # This will halt the action if any of the tests fail
        #        run: pipenv run pytest -v



