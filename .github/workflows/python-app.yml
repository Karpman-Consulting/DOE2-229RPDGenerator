# This workflow will check formatting with Black, install Python dependencies, and run tests with pytest
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

# Apply this workflow when creating a pull request or pushing a commit to a PR
on: pull_request

jobs:
  black-formatting-check:
    name: Black Formatting Check
    runs-on: windows-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v5
      - name: Run Black
        uses: psf/black@stable
        with:
          version: "24.2.0"

  rpd-tests:
    name: Run RPD Tests
    runs-on: windows-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      - name: Set-Up Python v3.11 32-bit
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          architecture: 'x86'
      - name: Set Environment Variables
        run: echo "PIPENV_VENV_IN_PROJECT=true" >> $env:GITHUB_ENV
      - name: Install pipenv
        run: |
          python -m pip install --upgrade pip
          pip install pipenv
      - name: Cache Dependencies
        uses: actions/cache@v4
        id: cache-dependencies
        with:
          path: .venv
          key: ${{ runner.os }}-pipenv-v6-${{ hashFiles('Pipfile.lock') }}
      - name: Install Dependencies
        if: steps.cache-dependencies.outputs.cache-hit != 'true'
        run: pipenv install --dev --verbose
        env:
          PIPENV_PYTHON: C:\hostedtoolcache\windows\Python\3.11\x86\python.exe



#  run-rpd-tests:
#    name: Run RPD Tests
#    runs-on: windows-latest
#    needs: setup
#
#    steps:
#      - name: Checkout Code
#        uses: actions/checkout@v4
#
#      - name: Restore Cached Dependencies
#        uses: actions/cache@v4
#        with:
#          path: .venv
#          key: ${{ runner.os }}-pipenv-v6-${{ hashFiles('Pipfile.lock') }}
#          restore-keys: ${{ runner.os }}-pipenv-v6-
#
#      - name: Generate RPD Files
#        run: pipenv run python test/generate_test_rpds_from_bdls.py
#
#      - name: Run RPD Tests
#        run: pipenv run python test/test_generated_rpd_files.py


#  rpd-validation-test:
#    name: Run RPD Validation Tests
#    runs-on: windows-latest
#    needs: build
#
#    steps:
#      - name: Checkout Code
#        uses: actions/checkout@v4
#
#      - name: Set-Up Python
#        uses: actions/setup-python@v5
#        with:
#          python-version: '3.11'
#          architecture: 'x86'
#
#      - name: Restore Cached Dependencies
#        uses: actions/cache@v4
#        with:
#          path: .venv
#          key: ${{ runner.os }}-pipenv-v6-${{ hashFiles('Pipfile.lock') }}
#          restore-keys: ${{ runner.os }}-pipenv-v6-
#
#      - name: Install pipenv
#        run: python -m pip install pipenv


#         Step 3: Run the RPD validation script using pipenv
#             - name: Validate the generated RPDs
#               run: |
#                 pipenv run python test/validate_test_rpds.py temp_directory
#
#         Step 4: Run the JSON comparison script using pipenv
#             - name: Run JSON comparison
#               run: |
#                 pipenv run python compare_json.py path/to/reference.json path/to/generated.json path/to/tolerance.json
#
#         Step 5: Clean up the temporary directory
#             - name: Clean up temporary directory
#               if: always()
#               run: |
#                  rm -rf temp_directory
#
#          run-unit-tests:
#            name: Run unit tests
#            runs-on: 'ubuntu-latest'
#            steps:
#              - name: Checkout code
#                uses: actions/checkout@v3
#              - name: Setup Python
#                uses: actions/setup-python@v4
#                with:
#                  python-version: '3.11.7'
#                  cache: 'pipenv'
#              - name: Install pipenv
#                run: curl https://raw.githubusercontent.com/pypa/pipenv/master/get-pipenv.py | python
#              - name: Install dependencies
#                run: pipenv install --dev
#              - name: Run pytests
#                # This will halt the action if any of the tests fail
#                run: pipenv run pytest -v



